package ru.femboypig.config;

import dev.isxander.yacl3.api.*;
import dev.isxander.yacl3.api.controller.*;
import dev.isxander.yacl3.config.v2.api.ConfigClassHandler;
import dev.isxander.yacl3.config.v2.api.serializer.GsonConfigSerializerBuilder;
import dev.isxander.yacl3.gui.controllers.ColorController;
import net.fabricmc.loader.api.FabricLoader;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.text.Text;

import java.awt.*;
import java.text.DecimalFormat;

public class BrushCC {
    public static final DecimalFormat FORMAT = new DecimalFormat("#.##");


    public static final ConfigClassHandler<SEConfigs> CONFIG = ConfigClassHandler.createBuilder(SEConfigs.class)
            .serializer(config -> GsonConfigSerializerBuilder.create(config)
                    .setPath(FabricLoader.getInstance().getConfigDir().resolve("brushclient.json"))
                    .build())
            .build();

    @SuppressWarnings("deprecation")
    public static Screen configScreen(Screen parent) {
        return YetAnotherConfigLib.create(CONFIG, ((defaults, config, builder) -> builder
                .title(Text.translatable("brushclient.title"))

                // RENDER CATEGORY

                .category(ConfigCategory.createBuilder()
                        .name(Text.translatable("brushclient.render"))

                        // No Hurt Cam
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.nohurtcam"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.nohurtcam"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.nohurtcam.desc")))
                                        .binding(defaults.hurtCamEnabled, () -> config.hurtCamEnabled, newVal -> config.hurtCamEnabled = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        // Visual Ratio
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.visualratio"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.visualratio"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.visualratio.desc")))
                                        .binding(defaults.visualRatioEnabled, () -> config.visualRatioEnabled, newVal -> config.visualRatioEnabled = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.visualratio"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.visualratio.desc")))
                                        .binding(1.78f, () -> config.visualRatio, newVal -> config.visualRatio = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(0.5f, 10f)
                                                .step(0.01f))
                                        .build())
                                .build())
                        // Black Pigs
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.blackpig"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.blackpig"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.blackpig.desc")))
                                        .binding(defaults.blackPigEnabled, () -> config.blackPigEnabled, newVal -> config.blackPigEnabled = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        // FullBright
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.fullbright"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.fullbright"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.fullbright.desc")))
                                        .binding(defaults.fullBrightEnabled, () -> config.fullBrightEnabled, newVal -> config.fullBrightEnabled = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        // No Armor Render
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.noarmorrender"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.noarmorrender"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.noarmorrender.desc")))
                                        .binding(defaults.NAREnabled, () -> config.NAREnabled, newVal -> config.NAREnabled = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        // Time Changer
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.timechanger"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.timechanger"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.timechanger.desc")))
                                        .binding(defaults.timeChangerEnabled, () -> config.timeChangerEnabled, newVal -> config.timeChangerEnabled = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(int.class)
                                        .name(Text.translatable("brushclient.render.timechanger"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.timechanger.desc")))
                                        .binding(0, () -> config.timeChanger, newVal -> config.timeChanger = newVal)
                                        .controller(opt -> IntegerSliderControllerBuilder.create(opt)
                                                .range(0, 18000)
                                                .step(100))
                                        .build())
                                .build())
                        // Render Name
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.rendername"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.rendername"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.rendername.desc")))
                                        .binding(defaults.renderNameEnabled, () -> config.renderNameEnabled, newVal -> config.renderNameEnabled = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        // Animations
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.animations"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.animations"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.animations.desc")))
                                        .binding(defaults.animationsEnabled, () -> config.animationsEnabled, newVal -> config.animationsEnabled = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.animations.main"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.animations.desc")))
                                        .binding(defaults.animationsMain, () -> config.animationsMain, newVal -> config.animationsMain = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.animations.off"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.animations.desc")))
                                        .binding(defaults.animationsOff, () -> config.animationsOff, newVal -> config.animationsOff = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.animations.slowAnim"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.animations.desc")))
                                        .binding(defaults.slowAnimations, () -> config.slowAnimations, newVal -> config.slowAnimations = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(int.class)
                                        .name(Text.translatable("brushclient.render.animations.slowAnim"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.animations.desc")))
                                        .binding(12, () -> config.slowValue, newVal -> config.slowValue = newVal)
                                        .controller(opt -> IntegerSliderControllerBuilder.create(opt)
                                                .range(0, 50)
                                                .step(1))
                                        .build())
                                .build())
                        // View Model
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.viewmodel"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.items"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(defaults.affectItems, () -> config.affectItems, newVal -> config.affectItems = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.scale"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(1f, () -> config.scale, newVal -> config.scale = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(0.1f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.scaleoff"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(1f, () -> config.scaleoff, newVal -> config.scaleoff = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(0.1f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.posX"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.posX, newVal -> config.posX = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-3f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.posY"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.posY, newVal -> config.posY = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-3f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.posZ"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.posZ, newVal -> config.posZ = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-3f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.rotMainX"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotMainX, newVal -> config.rotMainX = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.rotMainY"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotMainY, newVal -> config.rotMainY = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.rotMainY"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotMainZ, newVal -> config.rotMainZ = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.rotOffX"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotOffX, newVal -> config.rotOffX = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.rotMainY"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotOffY, newVal -> config.rotOffY = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.rotMainZ"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotOffZ, newVal -> config.rotOffZ = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.arm"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(defaults.affectArm, () -> config.affectArm, newVal -> config.affectArm = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.arm.posX"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.posArmX, newVal -> config.posArmX = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-3f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.arm.posY"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.posArmY, newVal -> config.posArmY = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-3f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.arm.posZ"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.posArmZ, newVal -> config.posArmZ = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-3f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.arm.rotX"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotArmX, newVal -> config.rotArmX = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.arm.rotY"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotArmY, newVal -> config.rotArmY = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.arm.rotZ"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotArmZ, newVal -> config.rotArmZ = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .build())
                        // Low Fire
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.lowfire"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.lowfire"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.lowfire.desc")))
                                        .binding(defaults.lowFireEnabled, () -> config.lowFireEnabled, newVal -> config.lowFireEnabled = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        // Cape
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.cape"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.cape"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.cape.desc")))
                                        .binding(defaults.capeEnabled, () -> config.capeEnabled, newVal -> config.capeEnabled = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        .build())


                // MISC CATEGORY

                .category(ConfigCategory.createBuilder()
                        .name(Text.translatable("brushclient.misc"))

                        // Elytra Swap
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.elytraswap"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.elytraswap"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.elytraswap.desc")))
                                        .binding(defaults.elytraswap, () -> config.elytraswap, newVal -> config.elytraswap = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        // Anti RP
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.antirp"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.antirp"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.antirp.desc")))
                                        .binding(defaults.antiRP, () -> config.antiRP, newVal -> config.antiRP = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        // Hide Particles
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.hideparticles"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.hideparticles"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.hideparticles.desc")))
                                        .binding(defaults.hideParticles, () -> config.hideParticles, newVal -> config.hideParticles = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        // Hide Screens
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.hidescreens"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.hidescreens"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.hidescreens.desc")))
                                        .binding(defaults.hideScreens, () -> config.hideScreens, newVal -> config.hideScreens = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        // Hide Name
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.hidename"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.hidename"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.hidename.desc")))
                                        .binding(defaults.hideName, () -> config.hideName, newVal -> config.hideName = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(String.class)
                                        .name(Text.translatable("brushclient.misc.hidename.fake"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.hidename.desc")))
                                        .binding(defaults.fakeName, () -> config.fakeName, newVal -> config.fakeName = newVal)
                                        .controller(StringControllerBuilder::create)
                                        .build())
                                .build())
                        .build())

                // HUD CATEGORY

                .category(ConfigCategory.createBuilder()
                        .name(Text.translatable("brushclient.hud"))

                        // Effect Time
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.hud.effecttime"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.hud.effecttime"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.effecttime.desc")))
                                        .binding(defaults.effectTimeEnabled, () -> config.effectTimeEnabled, newVal -> config.effectTimeEnabled = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.hud.rpc"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.hud.rpc"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.rpc.desc")))
                                        .binding(defaults.rpc, () -> config.rpc, newVal -> config.rpc = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        .build())

                // COMBAT CATEGORY

                .category(ConfigCategory.createBuilder()
                        .name(Text.translatable("brushclient.combat"))

                        // Hit Armor
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.combat.hitarmor"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.combat.hitarmor"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.combat.hitarmor.desc")))
                                        .binding(defaults.hitArmor, () -> config.hitArmor, newVal -> config.hitArmor = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        // Crystal Optimizer
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.combat.co"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.combat.co"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.combat.co.desc")))
                                        .binding(defaults.coEnabled, () -> config.coEnabled, newVal -> config.coEnabled = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        .build())
        )).generateScreen(parent);
    }
}